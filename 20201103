<template>
  <div :id="myId"></div>
</template>

<script>
import * as d3 from "d3";
import { LINE_CHART_SIZE, TIME_FORMAT } from "./visual-chart-setting.js";

export default {
  name: "VisualLineChart",
  props: {
    data: Array,
    chartId: String,
  },

  mounted() {
    this.renderChart();
  },
  data() {
    return {
      width: LINE_CHART_SIZE.WIDTH,
      height: LINE_CHART_SIZE.HEIGHT,
      valueLine: [],
      myId: "",
    };
  },

  created() {
    this.myId = "line-chart" + this.chartId;
  },
  methods: {
    renderChart() {
      const data = this.data;
      const timeDataDisplay = this.collectTime(data);
      const margin = LINE_CHART_SIZE.MARGIN;
      const width = this.width - margin.left - margin.right;
      const height = this.height - margin.top - margin.bottom;

      // set the ranges
      const x = d3.scaleTime().range([0, width]);
      const y = d3.scaleLinear().range([height, 0]);

      const color = d3.scaleOrdinal(d3.schemeCategory10);

      const xAxis = d3
        .axisBottom()
        .scale(x)
        .tickValues(timeDataDisplay)
        .tickFormat(d3.timeFormat(TIME_FORMAT.MILLISECONDS));

      const yAxis = d3.axisLeft().scale(y);

      const line = d3
        .line()
        .x(function(d) {
          return x(d.time);
        })
        .y(function(d) {
          return y(d.values);
        });
      console.log(this.myId);
      const svg = d3
        .select("#" + this.myId)
        .append("svg")
        .attr("preserveAspectRatio", "xMinYMin meet")
        .attr("viewBox", `0 0 1450 220`)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      color.domain(
        d3.keys(data[0]).filter((key) => {
          return key !== "time";
        })
      );

      const timeseries = color.domain().map((name) => {
        return {
          name: name,
          values: data.map((d) => {
            return { time: d.time, values: +d[name] };
          }),
        };
      });

      const keyColor = timeseries.map((item) => item.name);

      x.domain(
        d3.extent(data, (d) => {
          return d.time;
        })
      );

      y.domain([
        d3.min(timeseries, (c) => {
          return d3.min(c.values, (v) => {
            return v.values;
          });
        }),
        d3.max(timeseries, (c) => {
          return d3.max(c.values, (v) => {
            return v.values;
          });
        }),
      ]);

      svg
        .append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

      svg
        .append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("class", "style-unit")
        .attr("y", -40)
        .attr("x", -20)
        .attr("dy", "0")
        .style("text-anchor", "middle")
        .text("values");

      const col = svg
        .selectAll(".col")
        .data(timeseries)
        .enter()
        .append("g")
        .attr("class", "col")
        .attr("id", (d) => {
          return d.name.replace(" ", "");
        });

      col
        .append("path")
        .attr("class", "line")
        .attr("d", (d) => {
          return line(d.values);
        })
        .style("stroke", (d) => {
          return color(d.name);
        });

      col
        .append("text")
        .datum((d) => {
          return { name: d.name, value: d.values[d.values.length - 1] };
        })
        .attr("transform", (d) => {
          return "translate(" + x(d.value.time) + "," + y(d.value.values) + ")";
        })
        .attr("x", 3)
        .attr("dy", ".35em")
        .text((d) => {
          return d.name;
        })
        .on("mouseenter", (d) => {
          svg
            .selectAll("#" + d.name.replace(" ", "") + " path")
            .style("stroke-width", "0.18rem");
        })
        .on("mouseleave", (d) => {
          svg
            .selectAll("#" + d.name.replace(" ", "") + " path")
            .style("stroke-width", "0.1rem");
        });

      // add the Y gridlines
      svg
        .append("g")
        .attr("class", "grid")
        .call(
          this.make_y_gridlines(y)
            .tickSize(-width)
            .tickFormat("")
        );

      const size = LINE_CHART_SIZE.LEGEND_RECT;
      svg
        .selectAll("mydots")
        .data(keyColor)
        .enter()
        .append("rect")
        .attr("class", "position")
        .attr("x", width + LINE_CHART_SIZE.X_LEGEND)
        .attr("y", (d, i) => {
          return LINE_CHART_SIZE.Y_LEGEND + i * (size + 5);
        }) // 100 is where the first dot appears. 25 is the distance between dots
        .attr("width", size)
        .attr("height", size)
        .style("fill", (d) => {
          return color(d);
        });

      // Add one dot in the legend for each name.
      svg
        .selectAll("mylabels")
        .data(keyColor)
        .enter()
        .append("text")
        .attr("class", "position")
        .attr("x", width + LINE_CHART_SIZE.X_LEGEND + size * 1.5)
        .attr("y", (d, i) => {
          return LINE_CHART_SIZE.Y_LEGEND + i * (size + 5) + size / 2;
        }) // 100 is where the first dot appears. 25 is the distance between dots
        .style("fill", (d) => {
          return color(d);
        })
        .text((d) => {
          return d;
        })
        .attr("text-anchor", "left")
        .style("alignment-baseline", "middle");

      // Add Mouse Over

      const mouseG = svg.append("g").attr("class", "mouse-over-effects");

      mouseG
        .append("path") // this is the black vertical line to follow mouse
        .attr("class", "mouse-line")
        .style("stroke", "rgb(199, 195, 195)")
        .style("stroke-width", "0.5px")
        .style("opacity", "0");

      const interpolateCursor = true;

      mouseG
        .append("svg:rect") // append a rect to catch mouse movements on canvas
        .attr("width", width) // can't catch mouse events on a g element
        .attr("height", height)
        .attr("fill", "none")
        .attr("pointer-events", "all")
        .on("mouseout", () => {
          // on mouse out hide line, circles and text
          d3.select("#" + this.myId + " .mouse-line").style("opacity", "0");
          d3.selectAll("#" + this.myId + " .mouse-per-line circle").style(
            "opacity",
            "0"
          );
          d3.selectAll("#" + this.myId + " .mouse-per-line text").style(
            "opacity",
            "0"
          );
          d3.selectAll("#" + this.myId + " .tooltip-component").style(
            "visibility",
            "hidden"
          );
        })
        .on("mouseover", () => {
          // on mouse in show line, circles and text
          d3.select("#" + this.myId + " .mouse-line").style("opacity", "1");
          d3.selectAll("#" + this.myId + " .mouse-per-line circle").style(
            "opacity",
            "1"
          );
          d3.selectAll("#" + this.myId + " .mouse-per-line text").style(
            "opacity",
            "1"
          );
          d3.selectAll("#" + this.myId + " .tooltip-component").style(
            "visibility",
            "visible"
          );
        })
        .on("mousemove", () => {
          // mouse moving over canvas
          d3.select(".mouse-line").attr("d", function() {
            console.log(d3.select("rect"));
            const cursorX = d3.event.pageX;
            let d = "M" + cursorX + "," + height;
            d += " " + cursorX + "," + 0;
            return d;
          });
        });

      const cursorToTooltipOffset = 6;
      const updateTooltipContents = (tooltip, tooltipValues) => {
        if (!tooltipValues) return tooltip.style("display", "none");

        const rows = tooltip
          .selectAll(".tooltip-row")
          .data(tooltipValues, (d) => d.value + d.color);

        // select mot phan tu time row
        // kiem tra xem phan tu do co ton tai khong

        // neu khong ton tai thi add mot phan tu moi

        // neu da ton tai thi doi text cua phan tu do

        const row = rows
          .enter()
          .append("g")
          .attr("class", "tooltip-row")
          .attr("transform", (d, i) => `translate(5, ${i * 20 + 5})`);
        rows.exit().remove();

        // row
        //   .append('text')
        //   .attr('font-size', '16')
        //   .append('tspan')
        //   .attr('fill', 'white')
        //   .text(d => d.time);

        const colorSquareSize = LINE_CHART_SIZE.COLOR_SQUARE_SIZE;
        row
          .append("rect")
          .attr("height", colorSquareSize)
          .attr("width", colorSquareSize)
          .attr("fill", (d) => d.color);

        const textMargin = LINE_CHART_SIZE.TEXT_MARGIN;
        row
          .append("text")
          .attr("transform", `translate(${colorSquareSize + textMargin}, 0)`)
          .attr("dominant-baseline", "hanging")
          .attr("text-rendering", "optimizeLegibility")
          .attr("stroke", "none")
          .attr("fill", "white")
          .attr("font-size", "16")
          .append("tspan")
          .attr("fill", "white")
          .text((d) => d.value);

        const markers = mouseG
          .selectAll("#" + this.myId + " .cursor-data-marker")
          .data(
            tooltipValues,
            (d) => d.value + (d.color ? d.color : "#FFFFFFFF")
          );
        markers.exit().remove();
        markers
          .enter()
          .append("circle")
          .attr("class", "cursor-data-marker tooltip-component")
          .attr("pointer-events", "none")
          .attr("r", 3)
          .attr("cx", (d) => {
            return x(d.time);
          })
          .attr("cy", (d) => {
            return y(d.value);
          })
          .attr("fill", (d) => d.color);
      };

      const plotArea = d3.select("#" + this.myId + " .mouse-over-effects");
      const tooltip = svg
        .append("g")
        .attr("class", "tooltip tooltip-component");

      tooltip
        .append("rect")
        .attr("class", "tooltip-component")
        .attr("pointer-events", "none")
        .attr("height", LINE_CHART_SIZE.TOOLTIP_RECT_HEIGHT)
        .attr("width", LINE_CHART_SIZE.TOOLTIP_RECT_WIDTH)
        .attr("visibility", "hidden")
        .attr("opacity", LINE_CHART_SIZE.TOOLTIP_RECT_OPACITY)
        .attr("stroke", "black");
      const bs = d3.bisector((d) => {
        return d.time;
      });
      const bisectDate = bs.left;
      svg.on("mousemove", () => {
        const x0 = x.invert(d3.event.layerX);
        const i = bisectDate(data, x0, 1);
        const d0 = data[i - 1];
        const d1 = data[i];
        let d = undefined;
        let row = undefined;
        if (x0 - d0.time > d1.time - x0) {
          d = d1;
          row = data[i];
        } else {
          d = d0;
          row = data[i - 1];
        }
        let keys = [];
        Object.keys(row).forEach((prop) => {
          keys.push(prop);
        });

        keys = keys.filter((x) => x != "time");
        const result = keys.map((k) => {
          return { time: d.time, value: row[k], color: color(k) };
        });
        const tempTime = result[0];
        result.unshift({ time: tempTime.time, value: tempTime.time });
        console.log(result);
        let tooltipX = d3.event.layerX;
        if (!interpolateCursor) {
          tooltipX = x(d.time);
        }
        const verticalPositionPercent = 0.0;
        const tooltipY =
          plotArea.node().getBBox().height * verticalPositionPercent;

        tooltip
          .attr(
            "transform",
            `translate(${tooltipX + cursorToTooltipOffset}, ${tooltipY})`
          )
          .call(updateTooltipContents, result);
      });
    },

    collectTime(data) {
      const timeAllData = data.map((item) => item.time);

      const sizeCollection = Math.round(
        timeAllData.length / LINE_CHART_SIZE.X_AXIS_SIZE
      );

      const timeDataDisplay = [];

      for (let timeItem = 0; timeItem < timeAllData.length; timeItem++) {
        console.log(timeDataDisplay.length);
        if (
          timeItem % sizeCollection == 0 &&
          timeDataDisplay.length < LINE_CHART_SIZE.X_AXIS_SIZE
        ) {
          timeDataDisplay.push(timeAllData[timeItem]);
        }
      }
      return timeDataDisplay;
    },

    // gridlines in y axis function
    make_y_gridlines(y) {
      return d3.axisLeft(y).ticks(5);
    },
  },

  watch: {
    data(val) {
      if (val) {
        this.renderChart();
      }
    },
  },
};
</script>

<style scoped></style>
